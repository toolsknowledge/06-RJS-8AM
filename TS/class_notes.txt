variables
*********
    - variables are used to store the data

    Ex.
            string
            number
            boolean
            ---
            ---

    - we will declare the variables with var / let / const keywords

    - let and const keywords introduced in ES6

    - variables should contain a-z, A-Z, 0-9, $ and _

    - variables should not start with digits

Syntax
******
var/let/const variablename:datatype = value;


Ex.
+++

var msg:string = "welcome to reactjs";
console.log(msg);


functions
*********
    - particular business logic called as function

    - functions are used to reuse the business logic.

    - we have two types of functions

            1) named functions

            2) anonymous functions / arrow functions / nameless functions / lamda functions / callback functions


    named functions
    ***************

    the function with the user defined name called as named functions

    we will define named functions with "function" keyword


Syntax
******

1) function definition

2) function calling


function definition
*******************

function functionname(param1:datatype,param2:datatype,param3:datatype,.....paramn:datatype):returntype{
    //business logic
}


function calling
****************

functionname(arg1,arg2,arg3,.....arg n);


classes
*******
   - collection of "variables" and "functions" called as class.

   - we will define classes by using "class" keyword

   - typescript supports the following modifiers.

        1) public

        2) private

        3) protected

    - private modifier recomended to variables

    - public modifier recomended to functions

    - we will define constructors by using "constructor" keyword

    - we will refer current class members with the help of "this" keyword.

    - we will define object to the class with the "new" keyword.


modifiers
*********
    - typescript supports the following modifiers.

        1) public

        2) private

        3) protected

public
******
    public modifier applicable to "variables", "functions" and "constructor"

    public members we can access by class "objects"

    public members by default accessable to "child" classes

    public modifier recomended to functions


private
*******
    private modifier applicable to variables, functions and constructor

    private members won't accessable to "child" classes

    private members we can't access by using class "objects"

    we can't create object to the private class constructor

    private keyword is the secured

    recomended modifier for variables is private


protected
*********
    protected modifier applicable to "variables", "functions" and "constructor"

    protected members won't accessable with class "objects"

    protected members by default "available" to child classes


enum
****
    enum is the keyword used to define our own datatype


modules
*******
    collection of "modules" called as "project"

    because of "modules" application "readability" increses








































































































    























































































